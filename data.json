{"asyncData":["digraph AsyncGraph {\n\n\n}","digraph AsyncGraph {\n36[label=\"next tick (36)\" ,]\n\"0\" -> \"36\";\n}","digraph AsyncGraph {\n36[label=\"next tick (36)\" ,]\n38[label=\"promise (38)\" ,]\n\"0\" -> \"36\";\n\"37\" -> \"38\";\n}","digraph AsyncGraph {\n36[label=\"next tick (36)\" ,]\n38[label=\"promise (38)\" ,fillcolor=\"green\", style=\"filled\", fontcolor=\"white\"]\n\"0\" -> \"36\";\n\"37\" -> \"38\";\n}","digraph AsyncGraph {\n36[label=\"next tick (36)\" ,]\n38[label=\"promise (38)\" ,fillcolor=\"blue\", style=\"filled\", fontcolor=\"white\"]\n\"0\" -> \"36\";\n\"37\" -> \"38\";\n}","digraph AsyncGraph {\n36[label=\"next tick (36)\" ,fillcolor=\"green\", style=\"filled\", fontcolor=\"white\"]\n38[label=\"promise (38)\" ,fillcolor=\"blue\", style=\"filled\", fontcolor=\"white\"]\n\"0\" -> \"36\";\n\"37\" -> \"38\";\n}","digraph AsyncGraph {\n36[label=\"next tick (36)\" ,fillcolor=\"blue\", style=\"filled\", fontcolor=\"white\"]\n38[label=\"promise (38)\" ,fillcolor=\"blue\", style=\"filled\", fontcolor=\"white\"]\n\"0\" -> \"36\";\n\"37\" -> \"38\";\n}","digraph AsyncGraph {\n36[label=\"next tick (36)\" ,fillcolor=\"red\", style=\"filled\", fontcolor=\"white\"]\n38[label=\"promise (38)\" ,fillcolor=\"blue\", style=\"filled\", fontcolor=\"white\"]\n\"0\" -> \"36\";\n\"37\" -> \"38\";\n}","digraph AsyncGraph {\n36[label=\"next tick (36)\" ,fillcolor=\"red\", style=\"filled\", fontcolor=\"white\"]\n38[label=\"promise (38)\" ,fillcolor=\"red\", style=\"filled\", fontcolor=\"white\"]\n\"0\" -> \"36\";\n\"37\" -> \"38\";\n}"],"file":"import \"./hook.js\";\n\nfunction recursiveOperation(n) {\n  if (n === 0) return;\n  // process.nextTick(() => {\n    console.log(n);\n    recursiveOperation(n - 1);\n  // });\n}\n\nrecursiveOperation(7500);  // Won't cause a stack overflow due to deferred execution\n\n","filename":"exercise4.js"}